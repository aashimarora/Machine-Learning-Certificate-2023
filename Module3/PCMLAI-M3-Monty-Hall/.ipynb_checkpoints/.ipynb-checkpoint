{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "from scipy.stats import bernoulli"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modified Monty Hall Game\n",
    "- You are playing a game that is very similar to the Monty Hall game\n",
    "- There are 3 identical doors, one having a car behind, and the other two having goats behind\n",
    "- You pick a door, e.g., the second door\n",
    "- The host throws a fair coin: if it is heads, then the game ends and your door is opened. Otherwise, \n",
    "- The host rolls two fair dice. If the sum of numbers is more than 9, then the game ends similarly. Otherwise, the host opens one of the remaining two doors which has a goat behind.\n",
    "- The host asks you whether you would like to switch your door. You throw a loaded join which shows head 80\\% of the time. If the coin shows head, you switch your door. Otherwise you hold on to your original door.\n",
    "\n",
    "What is the probability of winning this game? Use Monte Carlo simulation and simulate this game at least $100,000$ times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-12-65445d1348eb>, line 25)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-12-65445d1348eb>\"\u001b[0;36m, line \u001b[0;32m25\u001b[0m\n\u001b[0;31m    else:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "#Open a door with a goat behind it \n",
    "\n",
    "def open_door(doors, winning_door):\n",
    "    if len(doors) != 2:\n",
    "        return None\n",
    "    else:\n",
    "        return random.choice([doors[i] for i in range(len(doors)) if doors[i] != winning_door])\n",
    "    \n",
    "np.random.seed(23)\n",
    "doors = [0,1,2]\n",
    "winning_door = randrange(3)\n",
    "picked_door = doors[1]\n",
    "doors.remove(picked_door)\n",
    "print(\"The remaining doors are therefore:\", doors)\n",
    "fair_coin = bernoulli.rvs(p = 0.5, size = 1)\n",
    "#it's a head\n",
    "if fair_coin == 1:\n",
    "    #open the picked door\n",
    "    #game ends\n",
    "else:\n",
    "    dice1 = np.random.randint(1,7)\n",
    "    dice2 = np.random.randint(1,7)\n",
    "    if dice1+dice2 > 9:\n",
    "        #open the picked door\n",
    "        #game ends\n",
    "    else:\n",
    "        #open a door with goat\n",
    "        opened_door = open_door(doors, winning_door)\n",
    "        print(\"The host has opened: Door\", opened_door)\n",
    "        doors.remove(opened_door)\n",
    "        remaining_door = doors[0]\n",
    "        #asked whether to switch the door\n",
    "        #do it based on loaded dice \n",
    "        loaded_coin = bernoulli.rvs(p = 0.8, size = 1)\n",
    "        if loaded_coin == 1:\n",
    "            #its  a head\n",
    "            #switch the door\n",
    "            picked_door = remaining_door\n",
    "            print(\"The picked door has been switched to: \", picked_door)\n",
    "        else:\n",
    "            #hold on to original door\n",
    "            pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
